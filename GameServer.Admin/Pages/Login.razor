@page "/login"
@using System.ComponentModel.DataAnnotations
@using GameServer.Admin.Services
@inject IAuthService AuthService
@inject NavigationManager NavigationManager

<div class="row">
    <div class="col-md-6 offset-md-3 mt-5">
        <div class="card">
            <div class="card-header">
                <h3>Admin Login</h3>
            </div>
            <div class="card-body">
                <EditForm Model="@_loginModel" OnValidSubmit="HandleLogin">
                    <DataAnnotationsValidator />
                    <div class="form-group">
                        <label for="username">Username</label>
                        <InputText id="username" @bind="_loginModel.Username" class="form-control" />
                        <ValidationMessage For="@(() => _loginModel.Username)" />
                    </div>
                    <div class="form-group">
                        <label for="password">Password</label>
                        <InputText id="password" @bind="_loginModel.Password" type="password" class="form-control" />
                        <ValidationMessage For="@(() => _loginModel.Password)" />
                    </div>
                    <button type="submit" class="btn btn-primary" disabled="@_isLoading">
                        @if (_isLoading)
                        {
                            <span class="spinner-border spinner-border-sm mr-1"></span>
                        }
                        Login
                    </button>
                    @if (!string.IsNullOrEmpty(_errorMessage))
                    {
                        <div class="alert alert-danger mt-3">
                            @_errorMessage
                        </div>
                    }
                </EditForm>
            </div>
        </div>
    </div>
</div>

@code {
    private LoginModel _loginModel = new LoginModel();
    private bool _isLoading;
    private string _errorMessage;

    protected override async Task OnInitializedAsync()
    {
        if (await AuthService.IsAuthenticatedAsync())
        {
            NavigationManager.NavigateTo("/");
        }
    }

    private async Task HandleLogin()
    {
        _isLoading = true;
        _errorMessage = string.Empty;

        try
        {
            var result = await AuthService.LoginAsync(_loginModel.Username, _loginModel.Password);
            if (result)
            {
                NavigationManager.NavigateTo("/");
            }
            else
            {
                _errorMessage = "Invalid username or password";
            }
        }
        catch (Exception ex)
        {
            _errorMessage = $"Login failed: {ex.Message}";
        }
        finally
        {
            _isLoading = false;
        }
    }

    private class LoginModel
    {
        [Required]
        public string Username { get; set; }

        [Required]
        public string Password { get; set; }
    }
}